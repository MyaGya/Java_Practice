크레인 인형뽑기 게임
---
package Programers;

class Solution {

    public int solution(int[][] board, int[] moves) {
        int answer = 0;
        return answer;
    }


    public static void main(String[] args) {
        Solution tmp = new Solution();
        int[][] board = new int[][]{{0, 0, 0, 0, 0}, {0, 0, 1, 0, 3}, {0, 2, 5, 0, 1},
            {4, 2, 4, 4, 2},
            {3, 5, 1, 3, 1}};
        int[] moves = new int[]{1, 5, 3, 5, 1, 2, 1, 4};
        tmp.solution(board, moves);
    }
}
---
두 개 뽑아서 더하기
---
package Programers;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

class Solution {

    public int[] solution(int[] numbers) {
        HashSet<Integer> ans = new HashSet<Integer>();
        for(int i=0;i<numbers.length;i++){
            for(int j=i+1;j<numbers.length;j++){
                ans.add(numbers[i] + numbers[j]);
            }
        }
        int[] ans2 = new int[ans.size()];
        int i =0;
        for (int number:ans){
            ans2[i++] = number;
        }
        Arrays.sort(ans2);
        return ans2;
    }

    public static void main(String[] args) {
        Solution tmp = new Solution();
        System.out.println(tmp.solution(new int[] {2,1,3,4,1}));
    }
}
---
모의고사
package Programers;


import java.util.ArrayList;

class Solution {

    public int[] solution(int[] answers) {
        int[] user1 = {1, 2, 3, 4, 5};
        int[] user2 = {2, 1, 2, 3, 2, 4, 2, 5};
        int[] user3 = {3, 3, 1, 1, 2, 2, 4, 4, 5, 5};
        int user1Count = 0;
        int user2Count = 0;
        int user3Count = 0;
        for (int i = 0; i < answers.length; i++) {
            if (answers[i] == user1[i % user1.length]) {
                user1Count++;
            }
            if (answers[i] == user2[i % user2.length]) {
                user2Count++;
            }
            if (answers[i] == user3[i % user3.length]) {
                user3Count++;
            }
        }
        int[] answer = new int[]{user1Count, user2Count, user3Count};
        int maxThereNumber = Math.max((Math.max(user1Count,user2Count)),user3Count);
        ArrayList<Integer> tmp = new ArrayList();
        for(int i=0;i<3;i++){
            if(answer[i] == maxThereNumber){
                tmp.add(i+1);
            }
        }

        return tmp.stream().sorted().mapToInt(i -> i).toArray();
    }

    public static void main(String[] args) {
        Solution tmp = new Solution();
        System.out.println(tmp.solution(new int[]{1, 3, 2, 4, 2}));
    }
}
---
K번째수
package Programers;

import java.util.ArrayList;
import java.util.Arrays;

class Solution {

    public int[] solution(int[] array, int[][] commands) {
        //int [] answer = new int[commands.length];
        ArrayList<Integer> answer = new ArrayList<Integer>();
        for (int[] command : commands) {
            int[] waitingSortData = new int[command[1] - command[0] + 1];
            int waitingSortDataCount = 0;
            for (int i = command[0] - 1; i <= command[1] - 1; i++) {
                waitingSortData[waitingSortDataCount++] = array[i];
            }
            Arrays.sort(waitingSortData);
            answer.add(waitingSortData[command[2]-1]);
        }
        return answer.stream().mapToInt(i -> i).toArray();
    }

    public static void main(String[] args) {
        Solution tmp = new Solution();
        System.out.println(tmp.solution(new int[]{1, 5, 2, 6, 3, 7, 4},new int[][]{{2, 5, 3},{4, 4, 1},{1, 7, 3}}));
    }
}
---
체육복
package Programers;

class Solution {

    public int solution(int n, int[] lost, int[] reserve) {
        int[] student = new int[n + 2];

        for (int i = 0; i < student.length; i++) {
            student[i] = 1;
        }
        for (int lostStudent : lost) {
            student[lostStudent] -= 1;
        }
        for (int reserveEnableStudent : reserve) {
            student[reserveEnableStudent] += 1;
        }
        for (int i = 1; i < student.length - 1; i++) {
            if (student[i] == 0) {
                if (student[i - 1] == 2) {  // 앞에서 빌리는 경우
                    student[i - 1] = 1;
                    continue;
                }
                if (student[i + 1] == 2) {  // 뒤에서 빌리는 경우
                    student[i + 1] = 1;
                    continue;
                }
                n -= 1;                     // 빌리지 못하는 경우
            }
        }
        return n;
    }

    public static void main(String[] args) {
        Solution tmp = new Solution();
        System.out.println(tmp.solution(5, new int[]{1, 2, 3, 4, 5}, new int[]{1}));
    }
}
---
가운데 글자 가져오기
package Programers;

class Solution {

    public String solution(String s) {
        String answer = "";
        if (s.length() % 2 == 1) {
            answer += s.charAt(s.length() / 2);
        } else {
            answer += s.charAt(s.length() / 2 - 1);
            answer += s.charAt(s.length() / 2);
        }

        return answer;

    }

    public static void main(String[] args) {
        Solution tmp = new Solution();
        System.out.println(tmp.solution("abcdef"));
    }
}
---
3진법 뒤집기
package Programers;

class Solution {

    public int solution(int n) {
        String ternaryNotation = "";
        int answer = 0;
        while (n > 0) {
            ternaryNotation += n % 3;
            n /= 3;
        }
        ternaryNotation = Long.toString(Long.parseLong(ternaryNotation));
        int powValue = ternaryNotation.length()-1;
        for(int i=0;i<ternaryNotation.length();i++){
            answer += Integer.parseInt(ternaryNotation.substring(i,i+1)) * Math.pow(3,powValue--);
        }
        return answer;
    }

    public static void main(String[] args) {
        Solution tmp = new Solution();
        System.out.println(tmp.solution(100000000));
    }
}
---
나누어 떨어지는 숫자 배열
package Programers;

import java.util.Arrays;

class Solution {
    public int[] solution(int[] arr, int divisor) {
        int[] answer = Arrays.stream(arr).sorted().filter(x -> x % divisor == 0).toArray();
        if (answer.length == 0) { return new int[]{-1};}
        return answer;
    }

}
---
같은 숫자는 싫어
package Programers;

import java.util.*;

public class Solution {
    public int[] solution(int []arr) {
        Stack<Integer> ans = new Stack<Integer>();
        for (int i : arr) {
            if (ans.empty()||ans.lastElement() != i) {
                ans.push(i);
            }
        }
        return ans.stream().mapToInt(i->i).toArray();
    }

    public static void main(String[] args) {
        Solution tmp = new Solution();
        System.out.println(Arrays.toString(tmp.solution(new int[]{1, 1, 3, 3, 0, 1, 1})));
    }
}
---
두 정수 사이의 합
package Programers;



import java.util.stream.LongStream;

class Solution {

    public long solution(int a, int b) {
        if (a > b) {
            int c = a;
            a = b;
            b = c;
        }
        return LongStream.rangeClosed(a, b).sum();
    }

    public static void main(String[] args) {
        Solution ans = new Solution();
        System.out.println(ans.solution(0,3));
    }
}
---
문자열 내 p와 y의 갯수
package Programers;

import java.util.Arrays;

class Solution {
    boolean solution(String s) {
        s = s.toLowerCase();
        int countP = 0;
        int countY = 0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i) == 'p'){
                countP++;
            }
            else if(s.charAt(i) == 'y'){
                countY++;
            }
        }
        return countP == countY;
    }
}
---
문자열 내림차수
package Programers;

import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class Solution {
    public String solution(String s) {
        return Stream.of(s.split("")).
            sorted(Comparator.reverseOrder()).
            collect(Collectors.joining());
    }
}
혹은
char[] sol = s.toCharArray();
    Arrays.sort(sol);
    return new StringBuilder(new String(sol)).reverse().toString();
---
문자열 다루기 기본
import java.util.regex.Pattern;

class Solution {
    public boolean solution(String s) {
        String solutionPattern = "[0-9]{4}|[0-9]{6}";
        return Pattern.matches(solutionPattern,s);
    }

}
---
문자열을 정수로 바꾸기
package Programers;


class Solution {
    public int solution(String s) {
        return Integer.parseInt(s);
    }
}
---
